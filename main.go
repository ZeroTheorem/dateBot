package main

import (
	"fmt"
	"log"
	"time"

	tele "gopkg.in/telebot.v4"
)

const (
	startMsg = "–ü—Ä–∏–≤–µ—Ç —Å–æ–ª–Ω—ã—à–∫–æ, –∫–ª–∞—Ü–∞–π –Ω–∞ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª, –∞ —Ç–∞–º –≤—Å–µ –ø–æ–π–º–µ—à—å ‚ù§Ô∏è"
	infoMsg  = `–£—Ä–∞ —Å–æ–ª–Ω—ã—à–∫–æ! –ú—ã –≤–º–µ—Å—Ç–µ —É–∂–µ %s!
–ò —è —Å—á–∞—Å–ª–∏–≤ –∫–∞–∂–¥—É—é –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—É —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚ù§Ô∏è`
	infoMsg2 = `ü§µ‚Äç‚ôÇ: –ë—É—Å–∏–Ω–∫–∞, –Ω–∞—à–∞ —Å–≤–∞–¥—å–±–∞ üíç —á–µ—Ä–µ–∑ %s!
–£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –∏ –ª—é–±–ª—é —Ç–µ–±—è –±–æ–ª—å—à–µ –∂–∏–∑–Ω–∏! ‚ù§Ô∏è

üë∞‚Äç‚ôÄ: –Ø —Ç–µ–±—è —Ç–æ–∂–µ –æ—á–µ–Ω—å –ª—é–±–ª—é, –ê–ª–µ–∫—Å–µ—é—à–∫–∞! ‚ù§Ô∏è

`
	infoMsg3 = `–ü–æ–∫–∞ —á—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è, –Ω–æ —Å–∫–æ—Ä–æ –∏—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ!
—è —Ç–µ–±—è –ª—é–±–ª—é ‚ù§Ô∏è`
	infoMsg4 = `–£—Ä–∞ –º–æ—è –ª—é–±–∏–º–∞—è –∂–µ–Ω–∞! –º—ã –∂–µ–Ω–∞—Ç—ã üíç —É–∂–µ —Ü–µ–ª—ã—Ö %s
–ê –≤–ø–µ—Ä–µ–¥–∏ —É –Ω–∞—Å —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ)
–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–¥–µ–ª ‚ù§Ô∏è
`
)

func main() {
	pref := tele.Settings{
		Token:     "8303161621:AAFz5p7NQPXbC9Jd4t5ePKNNH74KRY4s53g",
		Poller:    &tele.LongPoller{Timeout: 10 * time.Second},
		ParseMode: tele.ModeHTML,
	}

	b, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	pluralizeDays := pluralize("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")

	zone := time.FixedZone("UTC+3", 3*60*60)
	start := time.Date(2024, time.November, 21, 9, 53, 0, 0, zone)
	married := time.Date(2025, time.August, 22, 16, 30, 0, 0, zone)

	b.Handle("/start", func(c tele.Context) error {
		return c.Send(startMsg)
	})

	b.Handle("/time", func(c tele.Context) error {
		now := time.Now().In(zone)
		since := now.Sub(start)
		msg := fmt.Sprintf(infoMsg,
			pluralizeDays(int(since.Hours()/24)),
		)
		return c.Send(msg)
	})

	b.Handle("/m", func(c tele.Context) error {
		now := time.Now().In(zone)
		since := married.Sub(now)
		msg := fmt.Sprintf(infoMsg2,
			pluralizeDays(int(since.Hours()/24)),
		)
		return c.Send(msg)
	})

	b.Handle("/alm", func(c tele.Context) error {
		now := time.Now().In(zone)
		since := now.Sub(married)
		switch {
		case since <= 0:
			return c.Send(infoMsg3)
		}
		msg := fmt.Sprintf(infoMsg4,
			pluralizeDays(int(since.Hours()/24)),
		)
		return c.Send(msg)
	})
	b.Start()
}

func pluralize(singular, dual, plural string) func(int) string {
	return func(n int) string {
		if n%10 == 1 && n%100 != 11 {
			return fmt.Sprintf("<b>%d</b> %s", n, singular)
		} else if (n%10 >= 2 && n%10 <= 4) && !(n%100 >= 12 && n%100 <= 14) {
			return fmt.Sprintf("<b>%d</b> %s", n, dual)
		} else {
			return fmt.Sprintf("<b>%d</b> %s", n, plural)
		}
	}
}
